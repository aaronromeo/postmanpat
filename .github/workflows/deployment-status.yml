name: Deployment Status

on:
  push:
    branches: [ main ]

jobs:
  deployment-status:
    runs-on: ubuntu-latest
    steps:
    - name: Set deployment status to pending
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: 'pending',
            target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            description: 'Deployment is pending CI completion',
            context: 'deployment/dokku'
          });

    - name: Wait for CI workflow to complete
      uses: fountainhead/action-wait-for-check@v1.2.0
      id: wait-for-ci
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: CI / build
        ref: ${{ github.sha }}
        timeoutSeconds: 1800
        intervalSeconds: 30

    - name: Set deployment status based on CI result
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const ciResult = '${{ steps.wait-for-ci.outputs.conclusion }}';
          let state, description;
          
          if (ciResult === 'success') {
            state = 'pending';
            description = 'Deployment in progress';
          } else {
            state = 'failure';
            description = 'Deployment cancelled - CI failed';
          }
          
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: state,
            target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            description: description,
            context: 'deployment/dokku'
          });

    - name: Wait for deployment workflow to complete
      if: steps.wait-for-ci.outputs.conclusion == 'success'
      uses: actions/github-script@v7
      with:
        script: |
          const maxWaitTime = 30 * 60 * 1000; // 30 minutes
          const pollInterval = 30 * 1000; // 30 seconds
          const startTime = Date.now();
          
          while (Date.now() - startTime < maxWaitTime) {
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy.yml',
              head_sha: context.sha
            });
            
            const deployRun = runs.workflow_runs.find(run => 
              run.head_sha === context.sha && run.name === 'Deploy to Dokku'
            );
            
            if (deployRun && deployRun.status === 'completed') {
              const state = deployRun.conclusion === 'success' ? 'success' : 'failure';
              const description = deployRun.conclusion === 'success' ? 
                'Deployment completed successfully' : 'Deployment failed';
              
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                state: state,
                target_url: deployRun.html_url,
                description: description,
                context: 'deployment/dokku'
              });
              
              return;
            }
            
            await new Promise(resolve => setTimeout(resolve, pollInterval));
          }
          
          // Timeout
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: 'error',
            target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            description: 'Deployment status check timed out',
            context: 'deployment/dokku'
          });
