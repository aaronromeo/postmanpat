// Code generated by MockGen. DO NOT EDIT.
// Source: internal/utils/types.go
//
// Generated by this command:
//
//	mockgen -source=internal/utils/types.go -destination=internal/utils/mock_common_test.go -package=utils
//

// Package utils is a generated GoMock package.
package utils

import (
	reflect "reflect"

	go_imap "github.com/emersion/go-imap"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockClient) List(ref, name string, ch chan *go_imap.MailboxInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ref, name, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockClientMockRecorder) List(ref, name, ch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClient)(nil).List), ref, name, ch)
}
